#!/bin/rc
# An rc variant of rsc's https://pkg.go.dev/9fans.net/go/acme/watch
# Runs asynchronously.
# Requires commands "acmeevent2" and "enquote" from this git repo.
# You can add any number of commands in the +watch window, prefixed
# with "% ".
# The +watch window is marked as dirty while the commands are running.
# If a command fails, the subsequent commands are not run.
# If given a single param containing a space (or | ; & \n \t), then it
# will be copied verbatim to the window after a leading "% ":
# 	e.g. watch "ps | grep glenda" or
# 	or watch "pwd\n% date" (replace \n with literal newline)'
# Bugs: FIXME review after acmeevent2
# - If Kill is used, the commands not yet run are forgotten.
# - If the output for a command does not terminate with a new line, the
#   subsequent command will be forgotten on Get.
# - Tabs in command lines are replaced with spaces, due to use of `{}
# - Does not support chording on acme builtins like Look or Edit

rfork en

usage='usage: watch [-s1n] [-d dir] cmd [param ...]
	-1	listen for Put on current dir only, not subdirs
	-s	start command immediately
	-n	do not watch, only run the commands on Get or Put
	-d	cd to given dir, and listen for Put on files under it
	Flags taking no param may be combined eg: -sr
Details: src watch'

fn log{
	#echo $* >[1=2]
}
fn ctl{ echo $* >$w/ctl }
fn tag{ echo -n $* >$w/tag }
fn body{ echo -n $* >$w/body }
fn data{ echo $* >$w/data }
fn addr{ echo -n $* >$w/addr }

name='+watch'
dumpcmd=`{enquote watch $*}
dir=`{pwd}

start=n
recursive=y
nowatch=n
# adding -n to prevent our -n from being swallowed by echo
while(echo -n $1 | grep -s '^-[s1nd]+$'){
	log flag: $1
	if(~ $1 *s*) start=y
	if(~ $1 *1*) {
		recursive=n
		name='+watch-1'
	}
	if(~ $1 *n*){
		nowatch=y
		name='+watch-n'
	}
	# must be last, b/c param
	if(~ $1 -d){
		dir=$2
		shift
	}
	shift
}
if(~ $1 -*){
	echo $usage >[1=2]
	exit usage
}
name=$dir ^ / ^ $name

cd $dir
~ $dir */ || dir=$dir/
rx=$dir ^ '[^/]+$'
if(~ $nowatch y)
	rx=nevermatch
if not
	if(~ $recursive y) rx=$dir
log rx: $rx
if(~ $#* 0) start=n

winid=`{cat /mnt/acme/new/ctl | awk '{print $1}'}
w=/mnt/acme/$winid
cmdpidfile=/tmp/watch.cmdpid.$pid

log 'winid:' $winid
ctl 'name ' ^ $name
ctl dumpdir $dir
ctl dump $dumpcmd
ctl cleartag
tag ' ↑i ↓i Get Kill'
{
	# FIXME flaky
	if(echo -n $1 | ssam 'x/[ 	|&;\n]/c/‡/' | grep -s ‡){
		echo -n '%' $1
	}
	if not{
		echo -n '% '
		if(! ~ $#* 0)
			enquote -n $*
	}
} >$w/body
ctl clean
ctl menu

fn runcmd{
	log running
	prevstatus=''
	addr ,
	cat $w/body |
	awk '/^%[ 	]+[^ 	]/ {sub(/^%[ 	]+/, ""); print}' |
	while(line=`{read}){
		echo '%' $line
		status=$prevstatus
		if(~ $"prevstatus ''){
			rc -c $"line >[2=1]
			prevstatus=$status
			if(! ~ $"prevstatus '')
				echo '# status:' $prevstatus
		}
		if not{
			echo '# not run'
		}
	} >$w/data &
	cmdpid=$apid
	log cmdpid: $cmdpid
	echo $cmdpid >$cmdpidfile
	wait $cmdpid
	log exited
	ctl clean
	ctl menu
	addr 0; ctl 'dot=addr'; ctl show
	rm $cmdpidfile
}

fn killcmd{
	log killcmd
	cmdpid=`{cat $cmdpidfile}
	echo kill >/proc/$cmdpid/notepg
	# on command exit the main loop moves dot to beg, let's
	# wait for that to happen, then move dot to end so we see
	# the "killed" message.
	sleep .2
	addr '$'; ctl 'dot=addr'
	data watch: killed
	ctl clean
}

fn handleevent{
	log EVENT: $*
	orig=$1; type=$2; q0=$3; q1=$4; eq0=$5; eq1=$6; flag=$7; textlen=$8; text=$9; chordarg=$10; chordorig=$11

	switch($type-$text){
	case [Xx]-Get [Xx]-Put
		if(! test -f $cmdpidfile){
			runcmd &
			sleep .1
		}
	case [Xx]-Kill
		if(test -f $cmdpidfile)
			killcmd
	case [Xx]-Del
		if(test -f $cmdpidfile)
			echo 'watch: command still running' >$w/errors
		if not
			ctl del >[2]/dev/null
	case [XxLl]-*
		if(! ~ $chordarg ''){
			log CHORD text: $text chordarg: $chordarg
			$text $chordarg
		}
		if not{
			log forwarding
			echo $orig ^ $type $q0 $q1 >$w/event
		}
	}
}

fn handlelog{
	id=$1; op=$2; name=$3
	log LOG: id: $id op: $op name: $name
	if(~ $op put && echo $name | grep -s $rx && ! test -f $cmdpidfile){
		runcmd &
		sleep .1
	}
}

if(~ $start y)
	runcmd &
. <{acmeevent2 -l} &
